/**
 * @packageDocumentation
 *
 * A Blockstore implementation that uses a flavour of [Level](https://leveljs.org/) as a backend.
 *
 * N.b. this is here largely for the sake of completeness, in node you should probably use FSDatastore, in browsers you should probably use IDBDatastore.
 *
 * @example
 *
 * ```js
 * import { LevelBlockstore } from 'blockstore-level'
 *
 * const store = new LevelBlockstore('path/to/store')
 * ```
 */
import { BaseBlockstore } from 'blockstore-core';
import { Level } from 'level';
import { CID } from 'multiformats/cid';
import type { Pair } from 'interface-blockstore';
import type { AbortOptions, AwaitIterable } from 'interface-store';
import type { DatabaseOptions, OpenOptions } from 'level';
import type { MultibaseCodec } from 'multiformats/bases/interface';
export interface LevelBlockstoreInit extends DatabaseOptions<string, Uint8Array>, OpenOptions {
    /**
     * The multibase codec to use - nb. should be case insensitive.
     * default: base32upper
     */
    base?: MultibaseCodec<string>;
}
/**
 * A blockstore backed by leveldb
 */
export declare class LevelBlockstore extends BaseBlockstore {
    #private;
    db: Level<string, Uint8Array>;
    private readonly opts;
    private readonly base;
    constructor(path: string | Level<string, Uint8Array>, init?: LevelBlockstoreInit);
    open(): Promise<void>;
    put(key: CID, value: Uint8Array): Promise<CID>;
    get(key: CID): Promise<Uint8Array>;
    has(key: CID): Promise<boolean>;
    delete(key: CID): Promise<void>;
    close(): Promise<void>;
    getAll(options?: AbortOptions | undefined): AwaitIterable<Pair>;
}
//# sourceMappingURL=index.d.ts.map