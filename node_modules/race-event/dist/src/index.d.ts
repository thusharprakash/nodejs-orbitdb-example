/**
 * @packageDocumentation
 *
 * Race an event against an AbortSignal, taking care to remove any event
 * listeners that were added.
 *
 * @example
 *
 * ```TypeScript
 * const { raceEvent } = require('race-event')
 *
 * const controller = new AbortController()
 * const emitter = new EventTarget()
 *
 * setTimeout(() => {
 *   controller.abort()
 * }, 500)
 *
 * setTimeout(() => {
 *   // too late
 *   emitter.dispatchEvent(new CustomEvent('event'))
 * }, 1000)
 *
 * // throws an AbortError
 * const resolve = await raceEvent(emitter, 'event', controller.signal)
 * ```
 */
/**
 * An abort error class that extends error
 */
export declare class AbortError extends Error {
    type: string;
    code: string | string;
    constructor(message?: string, code?: string);
}
export interface RaceEventOptions<T> {
    /**
     * The message for the error thrown if the signal aborts
     */
    errorMessage?: string;
    /**
     * The code for the error thrown if the signal aborts
     */
    errorCode?: string;
    /**
     * When multiple events with the same name may be emitted, pass a filter
     * function here to allow ignoring ones that should not cause the returned
     * promise to resolve.
     */
    filter?(evt: T): boolean;
}
/**
 * Race a promise against an abort signal
 */
export declare function raceEvent<T>(emitter: EventTarget, eventName: string, signal?: AbortSignal, opts?: RaceEventOptions<T>): Promise<T>;
//# sourceMappingURL=index.d.ts.map